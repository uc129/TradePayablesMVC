@model TradePayablesMVC2017.Models.InvoicesWithHypCodeListView

@{
    ViewBag.Title = "Invoices With Hyperion Codes";
}

<h2>Invoices With Hyperion Codes, Billed Status, and Due Status for Quarter: @Model.CurrentQuarter.ToShortDateString()</h2>


<div class="table-container">
    <table id="hypInvoicesTable"
           class="table table-striped table-bordered table-hover table-responsive table-condensed table-sm"
           style="width:100%; display:none">

        <thead>
            <tr>
                <th>Company Code</th>
                <th>Document Type</th>
                <th>Purchasing Document</th>
                <th>Vendor</th>
                <th>Industry</th>
                <th>Payment Terms</th>
                <th>Amount in Local</th>
                <th>Credit Period</th>
                <th>Payment Date</th>
                <th>Posting Date</th>
                <th>Ageing Days</th>
                <th>Ageing Group</th>
                <th>GL Account</th>
                <th>GL Description</th>
                <th>Hyperion Code</th>
                <th>Hyp Code Desc</th>
                <th>Billed Status</th>
                <th>Due Status</th>
            </tr>
        </thead>

        <tbody>
            @if (Model != null && Model.Invoices != null)
            {
                foreach (var item in Model.Invoices)
                {
            <tr data-row-id="@item.InvoiceKey">
                <td>@item.CompanyCode</td>
                <td>@item.DocumentType</td>
                <td>@item.PurchasingDocument</td>
                <td>@item.Vendor</td>
                <td>@item.Industry</td>
                <td>@item.PaymentTerms</td>
                <td>@item.AmountLocal</td>
                <td>@item.CreditPeriod</td>
                <td>@item.PaymentDate</td>
                <td>@item.PostingDate</td>
                <td>@item.Ageing</td>
                <td>@item.AgeingGroup</td>
                <td>@item.GLAccount</td>
                <td>@item.GLDescription</td>
                <td>@item.Hyperion_Code</td>
                <td>@item.Hyp_Code_Description</td>
                <td>@item.Billed_Status</td>
                <td>@item.Due_Status</td>
            </tr>
                }
            }
        </tbody>
    </table>
</div>
@*<button id="saveChangesBtn" class="btn btn-primary" style="margin-top: 20px;">Save Changes</button>*@

@section scripts {
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    @*<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/2.0.8/css/dataTables.dataTables.min.css">
        <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/2.0.8/js/dataTables.min.js"></script>*@

    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.4/css/dataTables.bootstrap5.min.css">
    <script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.4/js/dataTables.bootstrap5.min.js"></script>

    <script>

        $(document).ready(function () {
            // Setup - add a text input to each footer cell
            $('#hypInvoicesTable thead th').each(function () {
                var title = $(this).text();
                $(this).html('<div class="filter"> <p>' + title + '</p> <input  type="text"  placeholder ="Search"/> </div>');
            });

            // DataTable initialization
            var table = $('#hypInvoicesTable').DataTable({
                "paging": true,
                "searching": true,
                "ordering": true,
                "info": true,
                // Make certain columns editable
                "columnDefs": [
                    //{ width: '100px', targets: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 19, 11, 12, 13, 14, 15,16,17] },  // Set width for the first column
                    //{ "targets": [1, 2, 4, 5], "className": "" }
                    //{ width: '150px', targets: 1 }   // Set width for the second column
                ]
            });

            // Apply the search
            table.columns().every(function () {
                var that = this; // Store reference to the column API instance

                $('input', this.header()).on('keyup change clear', function () {
                    if (that.search() !== this.value) {
                        that
                            .search(this.value)
                            .draw();
                    }
                });
            });
        });

            $(document).ready(function () {
                $("#hypInvoicesTable").css("display", "block")
            })
    </script>

    <style>
        .processed {
            background-color: burlywood;
        }
        .filter{
            max-width:100px;
        }
            .filter > input {
                width: clamp(80px, 100px, 120px); /* Example: min of 80px, preferred 100px, max of 120px */
            }
    </style>
}
