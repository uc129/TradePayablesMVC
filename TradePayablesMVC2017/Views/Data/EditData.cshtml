@model TradePayablesMVC2017.Models.EditInvoicesListModel

@{
    ViewBag.Title = "Edit Data";
}

<h2>Edit Data</h2>

<div class="table-container">
    <table id="editInvoicesTable" 
           class="table table-striped table-bordered table-hover table-responsive table-condensed table-sm" 
           style="width:100%; display:none">

        <thead>
            <tr>
                <th>Source</th>
                <th>GL Account</th>
                <th>GL Description</th>
                <th>Company Code</th>
                <th>Document Number</th>
                <th>Purchasing Document</th>
                <th>Document Header Text</th>
                <th>Assignment</th>
                <th>Document Type</th>
                <th>Vendor</th>
                <th>Text</th>
                <th>Industry</th>
                <th>Amount Local</th>
                <th>Payment Terms</th>
                <th>Processed</th>
                <th>Is Edited?</th>

            </tr>
        </thead>

        <tbody>
            @if (Model != null && Model.Invoices != null)
            {
                foreach (var item in Model.Invoices)
                {
            <tr data-row-id="@item.InvoiceKey">
                <td>@item.Source</td>
                <td>@item.GLAccount</td>
                <td class="long-text-cell">@item.GLDescription</td>
                <td>@item.CompanyCode</td>
                <td>@item.DocumentNumber</td>
                <td id="@(item.Id + item.PurchasingDocument)">@item.PurchasingDocument</td> @* cell no: 5*@
                <td class="long-text-cell">@item.DocumentHeaderText</td>
                <td class="long-text-cell">@item.Assignment</td>
                <td>@item.DocumentType</td>
                <td id="@(item.Id + item.Vendor)">@item.Vendor</td>   @* cell no: 9*@
                <td class="long-text-cell">@item.InvoiceDescription</td>
                <td>@item.Industry</td>
                <td>@item.AmountLocal</td>
                <td>@item.PaymentTerms</td>
                <td class="long-text-cell">@item.Processed</td>
                <td id="@(item.Id+"isedited")">@item.IsEdited</td>
            </tr>
                }
            }
        </tbody>
    </table>

</div>
<button id="saveChangesBtn" class="btn btn-primary" style="margin-top: 20px;">Save Changes</button>

@section scripts {
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    @*<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/2.0.8/css/dataTables.dataTables.min.css">
    <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/2.0.8/js/dataTables.min.js"></script>*@

    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.4/css/dataTables.bootstrap5.min.css">
    <script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.4/js/dataTables.bootstrap5.min.js"></script>

    <script>
        $(document).ready(function () {

            $('#editInvoicesTable thead th').each(function () {
                var title = $(this).text();
                $(this).html('<div class="filter"> <p>' + title + '</p> <input  type="text"  placeholder ="Search"/> </div>');
            });

            // DataTable initialization
            var table = $('#editInvoicesTable').DataTable({
                "paging": true,
                "searching": true,
                "ordering": true,
                "info": true,
                // Make certain columns editable
                "columnDefs": [
                    { "targets": [5,9], "className": "editable" } // Make Vendor, Purcahsing_Doc
                ]
            });

            table.columns().every(function () {
                var that = this; // Store reference to the column API instance

                $('input', this.header()).on('keyup change clear', function () {
                    if (that.search() !== this.value) {
                        that
                            .search(this.value)
                            .draw();
                    }
                });
            });

            $(document).ready(function () {
                $('#editInvoicesTable').css("display","block")
            })

            // Implement simple inline editing (click to edit)
            $('#editInvoicesTable tbody').on('click', 'td.editable', function () {
                var cell = table.cell(this);
                var originalValue = cell.data();
                var $cell = $(this);
                var rowId = $cell.closest('tr').attr('data-row-id')
                //var iseditedcellId =  "#"+rowId + "isedited"
                //console.log(iseditedcellId)

                //console.log("row id", rowId)

                // Check if already in edit mode
                if ($cell.find('input, select').length > 0) {
                    return;
                }

                // Create an input field
                var input = $('<input type="text" class="form-control" />')
                    .val(originalValue)
                    .on('blur', function () { // When input loses focus
                        var newValue = $(this).val();
                        if (newValue !== originalValue) {
                            cell.data(newValue).draw(); // Update DataTables data
                            $cell.addClass('edited-row').closest('tr').attr('is-edited', true);
                            //$(iseditedcellId).html = "true"
                            console.log("edited", originalValue, $(this).val())
                            //$(iseditedcellId).html = "true"

                        }
                        $cell.html(newValue); // Restore cell content
                    })
                    .on('keypress', function (e) {
                        if (e.which === 13) { // On Enter key
                            $(this).blur(); // Trigger blur to save
                        }
                    });

                $cell.html(input); // Replace cell content with input
                input.focus(); // Focus the input for immediate editing
            });


            // Function to gather edited data
            $('#saveChangesBtn').on('click', function () {
                let editedData = [];
                $('#editInvoicesTable tbody tr').each(function () {
                    const $row = $(this);
                    if ($row.attr('is-edited')=="true") { // Only process rows marked as edited
                        const invoiceId = $row.attr('data-row-id');
                        console.log(invoiceId)
                        let rowData = table.row($row).data(); // Get current data from DataTables

                        // Map DataTables data array to your ViewModel properties
                        editedData.push({
                            InvoiceKey: invoiceId,
                            PurchasingDocument: rowData[0], // Assuming column index 1 is "Purchasing Document"
                            DocumentHeaderText: rowData[1],
                            Assignment: rowData[2],
                            Vendor: rowData[3],
                            Text: rowData[4],
                            Industry: rowData[5],
                            PaymentTerms: rowData[6],
                            IsEdited: "True" // Confirm it's edited
                        });
                    }
                });
                console.log("edited data", editedData)
                if (editedData.length === 0) {
                    alert("No changes detected to save.");
                    return;
                }

                // Send edited data to controller via AJAX
                $.ajax({
                    url: '@Url.Action("SaveEditedData", "Data")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(editedData),
                    success: function (response) {
                        if (response.success) {
                            alert(response.message);
                            // Optional: Refresh table or indicate success
                            // table.rows('.edited-row').remove().draw(); // Remove highlight
                            $('.edited-row').removeClass('edited-row');
                            $('tr').attr("is-edited", false)
                        } else {
                            alert('Error saving data: ' + response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        alert('AJAX error: ' + error);
                        console.error(xhr.responseText);
                    }
                });
            });
        });
    </script>

    <style>
        .editable {
            cursor: pointer;
        }

            .editable input {
                width: 100%;
                box-sizing: border-box; /* Include padding and border in the element's total width and height */
                background-color: antiquewhite;
            }

        .edited-row {
            background-color: #ffffcc !important; /* Light yellow to indicate edited rows */
        }

        .filter {
            max-width: 100px;
        }

      .filter > input {
                width: clamp(80px, 100px, 120px); /* Example: min of 80px, preferred 100px, max of 120px */
            }
    </style>
}